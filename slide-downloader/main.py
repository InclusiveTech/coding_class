import json
import os
import pickle
import subprocess
import sys
import time

from dataclasses import dataclass

from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import AuthorizedSession


# Run everything relative to the git repository root:
os.chdir(subprocess.run(["git", "rev-parse", "--show-toplevel"], check=True, capture_output=True, cwd=os.path.dirname(__file__)).stdout.strip())


# This file needs to exist and point to a JSON auth file downloaded from
# console.developers.google.com for a project which has the slides.googleapis.com API enabled.
# Assuming you have such a project, you can download it by:
#  * Navigate to https://console.developers.google.com
#  * Click "Credentials" in the menu.
#  * Click "Create credentials".
#  * Select "OAuth client ID" from the drop-down.
#  * Select "Other" as the Application type.
#  * Click "Create".
#  * Click the "Download JSON" link in the row that just showed up (looks like a down arrow).
#
# If in doubt, just ask @illicitonion for help.
auth_json_file = "auth.json"
if not os.path.exists(auth_json_file):
    print(f"File {auth_json_file} did not exist; see instructions in {__file__}", file=sys.stderr)
    sys.exit(1)


@dataclass
class Config:
    presentation_id: str
    slides_dir: str
    slides_controller_js_path: str

    @property
    def url(self):
        return f"https://slides.googleapis.com/v1/presentations/{self.presentation_id}"

    def slide_thumbnail_url(self, slide_id: str):
        return f"{self.url}/pages/{slide_id}/thumbnail"


presentations = [
    Config(
        presentation_id="1_aSkOhYu0u4qU8Y00e_nvaeTdzwb8rds5RlHb9uWEUE",
        slides_dir="slides/html-css-curriculum",
        slides_controller_js_path="js/slide_controllers_html_css.js",
    ),
    Config(
        presentation_id="1bHPc80Ifpd-gjj2_U3ihhcFsiYZvlHRKWd90O6brqhw",
        slides_dir="slides/js-curriculum",
        slides_controller_js_path="js/slide_controllers_js.js",
    ),
]

flow = InstalledAppFlow.from_client_secrets_file(
    auth_json_file, ["https://www.googleapis.com/auth/presentations.readonly"]
)
credentials = flow.run_console()
authed_session = AuthorizedSession(credentials)


def fetch(url):
    response = authed_session.get(url)
    response.raise_for_status()
    return response


for presentation in presentations:
    with os.scandir(presentation.slides_dir) as dirents:
        for dirent in sorted(dirents, key=lambda d: d.name):
            if dirent.is_file() and dirent.name.lower().endswith(".png"):
                print(f"Removing {dirent.path}")
                os.remove(dirent.path)

    with open(presentation.slides_controller_js_path, "w") as controller_js:
        controller_js.write(
            """// This file was auto-generated by the slide downloader - do not manually edit it!
var app = angular.module('SlideApp', ['ui.ace', 'LocalStorageModule']);

app.directive('slideImage', function() {
    return function(scope, element, attrs) {
        attrs.$observe('slideImage', function(value) {
            element.css({
                'background-image': 'url(' + value +')',
                'background-size' : 'cover'
            });
        });
    }
});

app.controller('SlideController', function($scope, $sce, localStorageService) {
    $scope.slideImages = [
"""
        )

        slides_array = fetch(presentation.url).json()["slides"]
        for i, slide in enumerate(slides_array):
            slide_url = fetch(presentation.slide_thumbnail_url(slide["objectId"])).json()[
                "contentUrl"
            ]
            path = os.path.join(presentation.slides_dir, f"{i+1:03d}.png")
            print(f"Downloading {slide_url} -> {path}")
            with open(path, "wb") as f:
                thumbnail_response = fetch(slide_url)
                f.write(thumbnail_response.content)
            print(f"        '{path}',", file=controller_js)
            # We're rate-limited on the server side to 100 expensive read requests per 100 seconds.
            # Avoid going over:
            time.sleep(0.6)

        controller_js.write(
            """        ];
    var html = localStorageService.get('html') || "";
    $scope.data = {htmlString:html, trustedVersion:html}

    var slideNos = localStorageService.get('currentSlideNum') || 0;
    $scope.currentSlideNum = slideNos;
    $scope.$watch('currentSlideNum', function(value){
        localStorageService.add('currentSlideNum', value);
    });




    $scope.nextSlide = function() {
        if($scope.currentSlideNum == $scope.slideImages.length-1) {
            return;
        }
        $scope.currentSlideNum++;
    }

    $scope.prevSlide = function() {
        if($scope.currentSlideNum == 0) {
            return;
        }
        $scope.currentSlideNum--;
    }

    $scope.currentSlide = function() {
        return $scope.slideImages[$scope.currentSlideNum];
    }

    $scope.progress = function() {
        var current = parseInt($scope.currentSlideNum) + 1,
            total = $scope.slideImages.length;
        return current + "/" + total;
    }

    $scope.$watch("data.htmlString", function(newValue) {
        $scope.data.trustedVersion = $sce.trustAsHtml(newValue);
        localStorageService.add('html', newValue);

    }, true);
});
"""
        )
